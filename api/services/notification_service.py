from typing import List, Dict, Any, Optional
from datetime import datetime
from config.socket import get_sio
from repositories.notification_repository import NotificationRepository
from config.database import get_database


class NotificationService:
    def __init__(self):
        self.sio = get_sio()
        self._repository = None
    
    @property
    def repository(self):
        """Lazy load repository khi c·∫ßn d√πng"""
        if self._repository is None:
            self._repository = NotificationRepository(get_database())
        return self._repository
    
    async def send_notification_to_user(
        self, 
        user_id: str, 
        notification_data: Dict[str, Any]
    ):
        """
        G·ª≠i notification ƒë·∫øn user (WebSocket + Database)
        - user_id: ID c·ªßa user c·∫ßn g·ª≠i
        - notification_data: D·ªØ li·ªáu notification
        """
        room = f'user_{user_id}'
        
        # 1. Save to database
        await self.repository.create_notification(
            user_id=user_id,
            order_id=notification_data.get('order_id'),
            title=notification_data.get('title'),
            message=notification_data.get('message'),
            type=notification_data.get('type'),
            metadata=notification_data
        )
        
        # 2. Emit via WebSocket
        await self.sio.emit('notification', notification_data, room=room, namespace='/notifications')
        print(f'üì¨ Notification sent to user {user_id}: {notification_data}')
    
    async def send_order_confirmation(
        self, 
        user_id: str, 
        order_id: str, 
        order_total: float
    ):
        """
        G·ª≠i notification x√°c nh·∫≠n ƒë∆°n h√†ng
        """
        notification = {
            'type': 'order_confirmed',
            'order_id': order_id,
            'message': f'ƒê∆°n h√†ng #{order_id} ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n',
            'title': 'ƒê∆°n h√†ng c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n',
            'total': order_total,
            'timestamp': datetime.utcnow().isoformat()
        }
        await self.send_notification_to_user(user_id, notification)
    
    async def send_order_placed_notification(
        self,
        user_id: str,
        order_id: str,
        order_total: float
    ):
        """
        G·ª≠i notification khi user ƒë·∫∑t h√†ng th√†nh c√¥ng
        """
        notification = {
            'type': 'order_placed',
            'order_id': order_id,
            'message': f'C·∫£m ∆°n b·∫°n ƒë√£ ƒë·∫∑t h√†ng #{order_id}',
            'title': 'ƒê·∫∑t h√†ng th√†nh c√¥ng',
            'total': order_total,
            'timestamp': datetime.utcnow().isoformat()
        }
        await self.send_notification_to_user(user_id, notification)
    
    async def send_new_order_notification_to_admin(
        self,
        order_id: str,
        customer_name: str,
        order_total: float
    ):
        """
        G·ª≠i notification cho admin khi c√≥ order m·ªõi
        - Ch·ªâ emit WebSocket, kh√¥ng l∆∞u v√†o DB (admin kh√¥ng c·∫ßn l∆∞u)
        """
        notification = {
            'type': 'new_order',
            'order_id': order_id,
            'message': f'ƒê∆°n h√†ng m·ªõi #{order_id} t·ª´ {customer_name}',
            'title': 'ƒê∆°n h√†ng m·ªõi',
            'total': order_total,
            'timestamp': datetime.utcnow().isoformat()
        }
        await self.sio.emit('notification', notification, room='admin', namespace='/notifications')
        print(f'üì¨ New order notification sent to admin: Order #{order_id}')
    
    async def send_order_shipping(
        self,
        user_id: str,
        order_id: str
    ):
        """
        G·ª≠i notification khi ƒë∆°n h√†ng ƒëang giao (WebSocket + Database)
        """
        notification = {
            'type': 'order_shipping',
            'order_id': order_id,
            'message': f'ƒê∆°n h√†ng #{order_id} ƒëang ƒë∆∞·ª£c giao',
            'title': 'ƒê∆°n h√†ng ƒëang giao',
            'timestamp': datetime.utcnow().isoformat()
        }
        await self.send_notification_to_user(user_id, notification)
    
    async def send_order_complete(
        self,
        user_id: str,
        order_id: str
    ):
        """
        G·ª≠i notification khi ƒë∆°n h√†ng ho√†n th√†nh (WebSocket + Database)
        """
        notification = {
            'type': 'order_complete',
            'order_id': order_id,
            'message': f'ƒê∆°n h√†ng #{order_id} ƒë√£ ho√†n th√†nh',
            'title': 'ƒê∆°n h√†ng ho√†n th√†nh',
            'timestamp': datetime.utcnow().isoformat()
        }
        await self.send_notification_to_user(user_id, notification)

notification_service = NotificationService()
